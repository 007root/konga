{
  "name": "Konga",
  "tagline": "Just another GUI to Kong API Gateway",
  "body": "## Screenshots\r\nhttps://postimg.org/gallery/podmfn4g/\r\n\r\n## Features\r\n* Manage APIs and plugins\r\n* Manage consumers, groups and credentials\r\n* Multiple nodes management\r\n* GUI level authentication\r\n\r\n## Compatibility\r\nKonga is built and tested on Kong 0.9.x but it probably works with older versions as well.\r\nFeedback on older versions is welcome.\r\n\r\n## Prerequisites\r\n- Nodejs\r\n- Npm\r\n- Gulp\r\n- Bower\r\n\r\n## Used libraries.\r\n* angular-sailsjs-boilerplate (awesome): https://github.com/tarlepp/angular-sailsjs-boilerplate\r\n* Sails.js, http://sailsjs.org/\r\n* AngularJS, https://angularjs.org/\r\n* Bootstrap, http://getbootstrap.com/\r\n\r\n## Installation\r\nInstall <code>npm</code> and <code>node.js</code>. Instructions can be found [here](http://sailsjs.org/#/getStarted?q=what-os-do-i-need).\r\n\r\nInstall <code>bower</code>, <code>gulp</code> and <code>sails</code> packages.\r\n<pre>\r\n$ npm install bower gulp sails -g\r\n</pre>\r\n\r\n#### Backend and frontend installation\r\n\r\nClone this repository\r\n<pre>$ git clone https://github.com/pantsel/konga.git</pre>\r\nNavigate to /backend and /frontend directories and run <code>npm install</code>\r\n<pre>\r\n$ cd path/to/cloned/konga/repo/backend\r\n$ npm install\r\n</pre>\r\n<pre>\r\n$ cd path/to/cloned/konga/repo/backend\r\n$ npm install\r\n</pre>\r\n\r\n### Configuration\r\nYou can configure your <code>backend</code> and <code>frontend</code> applications to use your environment specified\r\nsettings. Basically by default you don't need to make any configurations at all. With default configuration backend will be run on http://localhost:1337 and frontend on http://localhost:3001 (development) http://localhost:3000 (production).\r\n\r\n##### Backend\r\nThere is an example of backend configuration file on following path.\r\n\r\n<pre>\r\n/backend/config/local_example.js\r\n</pre>\r\n\r\nJust copy this to <code>/backend/config/local.js</code> and make necessary changes to it. Note that this\r\n<code>local.js</code> file is in .gitignore so it won't go to VCS at any point.\r\n\r\n##### Frontend\r\nThere is an example of front configuration file on following path.\r\n\r\n<pre>\r\n/frontend/config/config_example.json\r\n</pre>\r\n\r\nJust copy this to <code>/frontend/config/config.json</code> and make necessary changes to it. Note that this\r\n<code>config.json</code> file is in .gitignore so it won't go to VCS at any point.\r\n\r\n##### Notes\r\nIf you're changing your backend API url to another than <code>http://localhost:1337</code> you need to make\r\n<code>frontend/config/config.json</code> with proper content on it. Use that example file as start.\r\n\r\n## Running Konga\r\n#### Backend\r\n<pre>\r\n$ cd backend\r\n$ sails lift\r\n</pre>\r\n\r\nThis will start sails.js server on defined port. By default this is accessible from http://localhost:1337 url. If you\r\ntry that with your browser you should only see page that contains <code>Not Found</code> message on it. This means that\r\neverything is ok.\r\n\r\n#### Frontend\r\n\r\n##### Development #####\r\n<pre>\r\n$ cd frontend\r\n$ gulp serve\r\n</pre>\r\n\r\nThis will start simple web server that you can use within developing frontend side. By default this is accessible from http://localhost:3001 url. You should be see login page if you try that url with your browser.\r\n\r\n##### Deployment #####\r\nAs in production\r\n<pre>\r\n$ cd frontend\r\n$ gulp dist\r\n</pre>\r\n\r\nThis will create a deployment code to ```frontend/dist``` folder. After that you can serve those static HTML, CSS,\r\nJavascript and asset files by any web server you like (Apache, nginx, IIS, etc.). For testing this production ready code\r\nyou can also use ```gulp production``` command which will serve those dist files. By default this is accessible from\r\nhttp://localhost:3000 url.\r\n\r\n### Possible failures\r\nBelow is small list of possible failures that can occur while trying this POC.\r\n\r\n<ol>\r\n    <li>Sails won't lift and you get error message like: <code>Fatal error: watch ENOSPC</code>\r\n        <ul>\r\n            <li>http://stackoverflow.com/questions/16748737/grunt-watch-error-waiting-fatal-error-watch-enospc</li>\r\n            <li>tl;dr just run <code>npm dedupe</code>\r\n        </ul>\r\n    </li>\r\n    <li>Frontend side is missing some 3rd party libraries. eg. browser console is full of some errors.\r\n        <ul>\r\n            <li>Try to install bower packages manually by command <code>bower install</code> in <code>frontend</code> directory.\r\n        </ul>        \r\n    </li>\r\n    <li>When running gulp serve from the frontend directory an error of 'scss-lint' is not recognized.\r\n        <ul>\r\n            <li>Try running gem install scss-lint from the frontend directory.\r\n        </ul>        \r\n    </li>\r\n</ol>\r\n\r\n## Login to GUI\r\n\r\n#### Admin\r\nlogin: admin | password: adminadminadmin\r\n\r\n#### Demo user\r\nlogin: demo | password: demodemodemo\r\n\r\n## ToDo\r\n* Complete tests\r\n* Include Logging & dynamic SSL plugins\r\n* Write a detailed Wiki\r\n\r\n## Author\r\nPanagis Tselentis\r\n\r\n## License\r\nThe MIT License (MIT)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}